#include<iostream>
#include<fstream>
#include<string>
using namespace std;

ifstream inFile;
ofstream outFile;
string keywords[13] = { "function", "return","integer", "real","boolean", "if","else", "while", "false", "true", "read", "write", "fi" };
int separators[7] = { '$$','(',')',',',';','{','}' };
int operators[9] = { '=','==','!=','<','>','+','-','*','/' };

int ID_table[5][2] = { 2, 5, 3, 4, 3, 4, 3, 4, 5, 5 };//2, 3 are accepting states
int INT_table[2][1] = { 2, 2 };
int REAL_table[5][2] = { 2,3,2,4, 3,3,5,3,5,3 };

int num = 0;
int size;
string s, token, prev_token = "";
string fs_sl[6] = { "{","if","return","write","read","while" };
string fs_compound[1] = { "{" };
string fs_factor[4] = { "-","(", "true", "false" };
string fs_primary[3] = { "(","true","false" };
string follow_Set_Eprime[7] = { "=","==","!=", "<",">",")",";" };
string follow_Set_Q[6] = { "{","if","return","write","read","while" };
bool isIdentifier, isInt, isReal = 0;
void lexer(string s);
void Rat();
void opt_func_def();
void opt_dec_list();
void opt_paras();
void dec_list();
void statement();
void statement_list();
void compound();
void func();
void func_def();
void para();
void paras();
void qualifier();
void body();
void expression();
void Term();
void Factor();
void assign();
void declaration();
void IDs();
void If();
void primary();
void Return();
void Read();
void Write();
void While();
void condition();
void relop();
void Eprime();
void Tprime();
void M();
void G();
void H();
void P();
void Q();

bool set(string *x, int size) {
	//lexer(s);
	for (int i = 0; i < size; i++) {
		if (x[i] == token)
			return true;
	}
	return false;
}

int char_to_col_1(char m) {
	if (m >= 97 && m <= 122)
		return 1;
	else if (m >= 48 && m <= 57)
		return 2;
	else
		return 0;//error
}
int char_to_col_2(char m) {
	if (m >= 48 && m <= 57)
		return 1;
	else if (m == '.')
		return 2;
	else
		return 0;
}
//3 Finite State Automota to distinguish idetifier, interger and real
bool ID_FSA(string lulus) {
	int state = 1;
	unsigned int i = 0;
	for (i = 0; i < lulus.length(); i++) {
		state = ID_table[state - 1][char_to_col_1(lulus[i]) - 1];
	}
	if (state == 2 || state == 3)
		return true;
	else
		return false;
}
bool INT_FSA(string lulus) {
	int state = 1;
	for (int i = 0; i < lulus.length(); i++)
	{
		if (int(lulus[i]) < 48 || lulus[i] > 57)
			return false;
		state = INT_table[state - 1][0];
	}
	if (state == 2)
		return true;
	else
		return false;
}
bool REAL_FSA(string lulus) {
	int state = 1;
	for (int i = 0; i < lulus.length(); i++)
		state = REAL_table[state - 1][char_to_col_2(lulus[i]) - 1];
	if (state == 4 || state == 5)
		return true;
	else
		return false;
}
bool testKeyword(string lulus) {
	for (int i = 0; i < 13; i++)
	{
		if (lulus == keywords[i])
			return true;
	}
	return false;
}

int main() {
	string testfile, Input, output;
	cout << "enter file path:";
	cin >> testfile;

	cout << string(30, '=') << " TEST " << " " << string(30, '=') << endl;
	inFile.open(testfile);
	char ch;
	while (inFile.get(ch))
		Input.push_back(ch);
	inFile.close();

	output = Input;
	outFile.open("RatLog");

	lexer(Input);
	Rat();
	outFile.close();

	inFile.open("RatLog");
	while (inFile.get(ch))
		output.push_back(ch);
	cout << output << endl;
	inFile.close();

	system("pause");
	return 0;
}

//My lexer function
void lexer(string input) {
	int i = 0;
	token = "";
	if (int(input[i]) <= 122 && int(input[i]) >= 97||input[i]<=90&&input[i]>=65) {
		//if 1st input is a letter, then id or keyword
		token = input[i];
		i++;
		while (i < input.length() && (input[i] >= 97 && input[i] <= 122 || input[i] >= 48 && input[i] <= 57)) {
			token += input[i];
			i++;
		}//terminator

		if (testKeyword(token))
			outFile << "Token: keyword        Lexeme: " << token << endl;
		else if (ID_FSA(token)) {
			outFile << "Token: identifier       Lexeme: " << token << endl;
			isIdentifier = 1;
		}
		else
			outFile << "Invalid token in this language" << endl;
	}
	else if (input[i] >= 48 && input[i] <= 57)//if 1st input is a digit, then int or real
	{
		token += input[i];
		i++;
		while (i < input.length() && (input[i] >= 48 && input[i] <= 57 || input[i] == '.'))
		{//terminator (separator/operator/)
			token += input[i];
			i++;
		}
		if (INT_FSA(token)) {
			outFile << "Token: integer         Lexeme: " << token << endl;
			isInt = 1;
		}
		else if (REAL_FSA(token)) {
			outFile << "Token: real           Lexeme: " << token << endl;
			isReal = 1;
		}
		else
			outFile << "Invalid token in this language" << endl;
	}
	else {
		if (i<input.length()-1 && (input[i] == '=' || input[i] == '!') && input[i + 1] == '=') {
			token += input[i];
			i++;
			token += input[i];
			outFile << "Token: operators     Lexeme: " << token << endl;
		}
		else if (i<input.length() - 1 && input[i] == '$'&&input[i + 1] == '$') {
			token += input[i];
			i++;
			token += input[i];
			outFile << "Token: separator      Lexeme: " << token << endl;
		}
		else {
			bool tokenfound = 0;
			token = input[i];
			for (int j = 0; j < 7; j++)
			{
				if (input[i] == separators[j]) {
					tokenfound = 1;
					outFile << "Token: separator       Lexeme: " << token << endl;
					break;
				}
			}
			if (!tokenfound) {
				for (int j = 0; j < 9; j++) {
					if (input[i] == operators[j]) {
						outFile << "Token: operator        Lexeme: " << token << endl;
						break;
					}
				}
			}
		}
		i += 1;
	}
	if (input == "") {
		return;
	}
	while (i < input.length()&&input[i] == '\n' || input[i] == ' ')//remove empty spaces
		i++;
	s = "";//reset s
	for (i; i < input.length(); i++)
		s += input[i];//now s is the new input
}
//====================== RatSu15 Syntax Check ================================
void Rat()
{
	if (token != "$$")
		outFile << "error" << endl;
		outFile << "<Rat15su>:==$$<OPT Function definitions>$$<OPT Declaration List><Statement List>$$" << endl;
		opt_func_def();
		if (token != "$$")
			outFile << "syntax error: missing eof marker"<<endl;
		lexer(s);
		opt_dec_list();
		statement_list();
		if (token != "$$")
			outFile << "syntax error: missing eof marker" << endl;
}
void opt_func_def() {
	lexer(s);
	if (token == "function") {
		outFile << "<Opt Function Definitions>::=<Funciton Definition>" << endl;
		func_def();
	}
	else if (token == "$$") {//can go emtpy, so include follow set
		outFile << "<Opt Function Definitions>::=<empty>" << endl;
	}
	else
		outFile << "syntax error: can only be 'function' or eof marker" << endl;
}
void declaration() {
	if (token == "boolean" || token == "real" || token == "integer")//check if in first set
	{
		outFile << "<Declaration>::=<Quantifier><IDs>" << endl;
		qualifier();
		IDs();
	}
	else
		outFile << "syntax error: missing declaration types";
}
void dec_list()
{
	if (token == "boolean" || token == "real" || token == "integer")//check if in first set
	{
		outFile << "<Declaration List>::=<Declaration>;<Q>" << endl;
		declaration();
		if (token != ";")
			outFile << "syntax error: missing ';'";
		lexer(s);
		Q();
	}
	else
		outFile << "syntax error: missing declaration types"<<endl;
}
void Q() {
	if (set(follow_Set_Q, 6) || isIdentifier || isReal || isInt) {
		outFile << "<Q>::=<Empty>";
		isIdentifier, isReal, isInt = 0;
	}
	else if (token == "integer" || token == "boolean" || token == "real")
	{
		outFile << "<Declaration List>::=<Declaration><Declaration List>" << endl;
		dec_list();
	}
	else
		outFile << "syntax error: illegal declaration"<<endl;
}
void opt_dec_list() {
	
	if (token == "boolean" || token == "real" || token == "integer")//check if in first set
	{
		outFile << "<Opt Declaration List>::=<Declaration List>" << endl;
		dec_list();
	}
	else if (token == "{")
		outFile << "<Opt Declaration List>::=<empty>" << endl;
	else
		outFile << "syntax error: missing declaration types or '{'" << endl;
}
void statement_list() {
	if (set(fs_sl, 6)) {
		outFile << "<Statement List>::=<Statement>" << endl;
		statement();//go"return x"
		P();
	}
	else
		outFile << "syntax error: token not in the statement list" << endl;
}
void P() {
	
	if (token == "}" || token == "$$")
		outFile << "<P>::=<Empty>" << endl;
	else if (set(fs_sl, 6)) {
		outFile << "<P>::=<Statement List>" << endl;
		statement_list();
	}
	else
		outFile << "syntax error: token not in the statement list" << endl;
}
void func_def() {
	if (token == "function") {
		outFile << "<Function Definitions>::=<Function><M>" << endl;
		func();
		lexer(s);
		M();
	}
	else
		outFile << "syntax error: can only be 'function'" << endl;
}
void M() {
	if (token == "$$")
		outFile << "<M>::=<empty>" << endl;
	else if (token == "function") {
		outFile << "<M>::=<Function Definitions>" << endl;
		func_def();
	}
	else
		outFile << "syntax error: illegal function definition"<<endl;
}
void func() {
	if (token == "function") {
		outFile << "<Function>::=function<Identifier>(<Opt Parameters>)<Opt Declaration List><Body>" << endl;
		lexer(s);//"convert"
		if (isIdentifier) {
			lexer(s);
			if (token == "(") {
				lexer(s);//"far"
				opt_paras();
				if (token == ")") {
					lexer(s);//"{"
					opt_dec_list();//empty
					body();
				}
				else
					outFile << "syntax error: token should be ')'" << endl;
			}
			else
				outFile << "syntax error: token should be '('" << endl;
		}
		else
			outFile << "synatax error: token should be an identifier" << endl;
	}
	else
		outFile << "syntax error: token should be 'function'" << endl;
}
void opt_paras() {
	if (isIdentifier) {
		outFile << "<Opt Parameters>::=<Parameters>" << endl;
		paras();
	}
	else if (token == ")") {
		//check follow opt_para
		outFile << "<OPT Parameters>::=<empty>" << endl;
	}
	else
		outFile << "syntax error: parameter should start with an identifier" << endl;
}
void para() {
	if (isIdentifier) {
		outFile << "<Parameter>::=<Identifier><Qualifier>" << endl;
		isIdentifier = 0;
		lexer(s);//"integer"
		qualifier();
	}
	else
		outFile << "syntax error: parameter should start with an identifier" << endl;
}
void qualifier() {
	if (token == "integer")
		outFile << "<Qualifier>::=<integer>" << endl;
	else if (token == "boolean")
		outFile << "<Qualifier>::=<boolean>" << endl;
	else if (token == "real")
		outFile << "<Qualifier>::=<real>" << endl;
	else
		outFile << "syntax error: not a quanlifier" << endl;
}
void paras() {
	if (isIdentifier) {
		outFile << "<Parameters>::=<Parameter><G>" << endl;
		para();
		G();
	}
	else
		outFile << "syntax error: token should be an identifier" << endl;
}
void G() {
	lexer(s);
	if (token == ")")
		outFile << "<G>::=<Empty>" << endl;
	else if (token == ",")
	{
		outFile << "<G>::=,<Parameter>" << endl;
		paras();
	}
	else
		outFile << "syntax error: token should be ')' or ','" << endl;
}
void body() {
	if (token == "{") {
		outFile << "<Body>::={<Statement List>}" << endl;
		lexer(s);//"return"
		statement_list();
		if (token != "}")
			outFile << "syntax error: missing '}'" << endl;
	}
	else
		outFile << "syntax error: missing '{'" << endl;
}
void IDs() {
	lexer(s);//"x"
	if (isIdentifier) {
		isIdentifier = 0;
		outFile << "<IDs>::=<identifier>" << endl;
		lexer(s);
		H();
	}
	else
		outFile << "syntax error: should start with an identifier" << endl;
}
void H() {
	
	if (token == ";" || token == ")")
		outFile << "<H>::=<Empty>" << endl;
	else if (token == ",")
	{
		outFile << "<H>::=,<IDs>" << endl;
		IDs();
	}
	else
		outFile << "syntax error: not a IDs" << endl;
}
void statement() {
	if (token == "{")
		compound();
	else if (isIdentifier) {
		outFile << "<Statement>::=<Assign>" << endl;
		assign();
		isIdentifier = 0;
	}
	else if (token == "if")
	{
		outFile << "<Statement>::=<If>" << endl;
		If();
	}
	else if (token == "return")
	{
		outFile << "<Statement>::=<Return>" << endl;
		Return();
	}
	else if (token == "read")
	{
		outFile << "<Statement>::=<Read>" << endl;
		Read();
		lexer(s);
	}
	else if (token == "write")
	{
		outFile << "<Compound>::=<Write>" << endl;
		Write();
		lexer(s);
	}
	else if (token == "while")
	{
		outFile << "<Compound>::=<While>" << endl;
		While();
		lexer(s);
	}
	else
		outFile << "syntax error: not a statement" << endl;
}
void compound() {
	if (token == "{") {
		outFile << "<Compound>:=={<Statement List>}" << endl;
		statement_list();
		if (token != "}")
			outFile << "syntax error: token can only be '}'" << endl;
	}
	else
		outFile << "syntax error: missing '{'" << endl;
}
void assign() {
	if (isIdentifier) {
		outFile << "<Assign>::=<Identifier>=<Expression>;" << endl;
		lexer(s);
		if (token == "=")
			expression();
		else
			outFile << "syntax error: missing assignment operator '='" << endl;
		lexer(s);
		if (token != ";")
			outFile << "syntax error: token can only be ';'" << endl;
		isIdentifier = 0;
	}
	else
		outFile << "syntax error: illegal assignment" << endl;
}
void If() {
	lexer(s);
	if (token == "(")
	{
		outFile << "<If>::=if(<Condition>)<Statement>fi" << endl;
		condition();
		lexer(s);
		if (token == ")")
			statement();
		else
			outFile << "syntax error: token should be ')'" << endl;
		lexer(s);
		if (token != "fi")
			outFile << "syntax error: token can only be 'fi'" << endl;
	}
	else if (token == "(") {
		outFile << "<If>::=if(<Condition>)<Statement>else<Statement>fi" << endl;
		condition();
		lexer(s);
		if (token == ")")
			statement();
		else
			outFile << "syntax error: token should be ')'" << endl;
		lexer(s);
		if (token == "else")
			statement();
		else
			outFile << "syntax error: token should be 'else'" << endl;
		lexer(s);
		if (token != "fi")
			outFile << "syntax error: token should be 'fi'" << endl;
	}
	else
		outFile << "syntax error: missing token 'if'" << endl;
}
void Return() {
	outFile << "<Return>::=return<Expression>" << endl;
	lexer(s);//"x"
	expression();
	s += token;
	if (prev_token != ";")
		outFile << "syntax error: can only be ';'";
}
void Write() {
	lexer(s);
	if (token == "(") {
		outFile << "<Write>::=write(<Expression>)" << endl;
		lexer(s);
		expression();
		//lexer(s);
		if (token != ")")
			outFile << "syntax error: can only be ')'" << endl;
		lexer(s);
		if (token != ";")
			outFile << "syntax error: can only be ';'" << endl;
	}
	else
		outFile << "syntax error: missing '('" << endl;
}
void Read() {
	lexer(s);
	if (token == "(")
	{
		outFile << "<Read>::=(<IDs>);";
		IDs();
		if (token != ")")
			outFile << "syntax error: ";
		lexer(s);
		if (token != ";")
			outFile << "syntax error: ";
	}
	else
		outFile << "syntax error: missing'('" << endl;
}
void While() {
	lexer(s);
	if (token == "(") {
		lexer(s);
		condition();
		lexer(s);
		if (token == ")")
			statement();
		else
			outFile << "syntax error: missing')'" << endl;
	}
	else
		outFile << "syntax error: illegal while loop" << endl;

}
void condition() {
	if (set(fs_factor, 4) || isIdentifier || isInt || isReal) {
		outFile << "<Condition>::=<Expression><Relop><Expression>" << endl;
		expression();
		relop();
		expression();
	}
	else
		outFile << "syntax error: illegal condition" << endl;
}
void relop() {
	//lexer(s);
	if (token == "=")
		outFile << "<Relop>::= =" << endl;
	else if (token == ">")
		outFile << "<Relop>::= >" << endl;
	else if (token == "<")
		outFile << "<Relop>::= <" << endl;
	else if (token == "!=")
		outFile << "<Relop>::= !=" << endl;
	else if (token == "==")
		outFile << "<Relop>::= ==" << endl;
	else
		outFile << "syntax error: not a relop" << endl;
}
void expression() {
	if (set(fs_factor, 4) || isIdentifier || isInt || isReal) {
		outFile << "<Expression>::=<Term><Eprime>" << endl;
		Term();
		prev_token = token;
		lexer(s);
		Eprime();
	}
	
}
void Eprime() {
	if (token == "+")
	{
		outFile << "<Eprime>::=+<Term><Eprime>" << endl;
		lexer(s);
		Term();
		Eprime();
		lexer(s);
	}
		else if (token == "-") {
		outFile << "<Eprime>::=-<Term><Eprime>" << endl;
		lexer(s);
		Term();
		Eprime();
		lexer(s);
	}
	else if (token == ")" || token == ";"||token=="}")
		outFile << "<Eprime>::=<Empty>" << endl;
	else
		outFile << "syntax error: not a expression" << endl;

}
void Term() {
	if (set(fs_factor, 4) || isIdentifier || isInt || isReal)//might has problem lexer(s)
	{
		outFile << "<Term>::=<Factor><Tprime>" << endl;
		Factor();
		lexer(s);
		Tprime();
	}
	else
		outFile << "syntax error: not a term" << endl;
}
void Tprime() {
	if (token == "*") {
		outFile << "<Tprime>::=*<Factor><Tprime>" << endl;
		lexer(s);
		Factor();
		lexer(s);
		Tprime();
	}
	else if (token == "/") {
		outFile << "<TPrime>::=/<Factor><Tprime>" << endl;
		lexer(s);
		Factor();
		lexer(s);
		Tprime();
	}
	else if (token == "+" || token == "-" || token == ")" || token == ";" || isIdentifier || isInt || isReal) {
		outFile << "<Tprime>::=<Empty>" << endl;
	}
	else
		outFile << "syntax error: not a term" << endl;
}
void Factor() {
	if (token == "-") {
		outFile << "<Factor>::=-<Primary>" << endl;
		//lexer(s);
		primary();
	}
	else if (set(fs_primary, 3) || isIdentifier || isInt || isReal) {
		outFile << "<Factor>::=<Primary>" << endl;
		//lexer(s);
		primary();
	}
	else
		outFile << "synatax error: not a factor" << endl;
}
	void primary() {
	if (token == "true" || token == "false")
		outFile << "<Primary>::=<" << token << ">" << endl;
	else if (isIdentifier)
	{
		outFile << "<Primary>::=<identifier>"<<endl;
		lexer(s);
		if (token == "(") {
			outFile << "<Primary>::=<identifier><IDs>" << endl;
			IDs();
			lexer(s);
			if (token == ")")
				outFile << "(IDs)";
		}

		isIdentifier = 0;
	}
	else if (isInt)
	{
		outFile << "<Primary>::=<integer>" << endl;
		isInt = 0;
	}
	else if (isReal)
	{
		outFile << "<Primary>::=<Real>" << endl;
		isReal = 0;
	}
	else if (token == "(") {
		outFile << "<Primary>::=(<expression>)" << endl;
		lexer(s);
		expression();
		if (token != ")")
			outFile << "syntax error: missing ')'" << endl;
	}
	else
		outFile << "syntax error: not a primary" << endl;
	
}